320. Generalized Abbreviation

Write a function to generate the generalized abbreviations of a word.

Example:
Given word = "word", return the following list (order does not matter):
["word", "1ord", "w1rd", "wo1d", "wor1", "2rd", "w2d", "wo2", "1o1d", "1or1", "w1r1", "1o2", "2r1", "3d", "w3", "4"]

First slow solution:

class Solution(object):
    def generateAbbreviations(self, word):
        """
        :type word: str
        :rtype: List[str]
        """
        def getabb(word):
            if not word or len(word)==0:
                return{''}
            re=[word]
            for i in range(1,len(word)+1):
                for j in range(0,len(word)+1-i):
                    re.append(word[:j]+str(i)+word[j+i:])
                    
            for i in range(1,len(word)-1):
                left=getabb(word[:i])
                right=getabb(word[i+1:])
                re.extend(['%s%s%s' % (a,word[i],b) for a in left for b in right])
            return set(re)
        return sorted(list(getabb(word)))


Improvement using back tracking:
class Solution(object):
    def generateAbbreviations(self, word):
        """
        :type word: str
        :rtype: List[str]
        """
        t={}
        t['']=['']
        for i in range(len(word)):
            e=[]
            for item in t[word[:i]]:
                e.append(item+word[i])
                if len(item)>0 and item[-1].isdigit():
                    j=0
                    while j<len(item) and item[-1-j:].isdigit():
                        j+=1
                    e.append(item[:-1-j+1]+str(int(item[-1-j+1:])+1))
                else:
                    e.append(item+'1')
            t[word[:i+1]]=e
            
        return t[word]
