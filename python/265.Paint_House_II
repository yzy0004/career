265. Paint House II

There are a row of n houses, each house can be painted with one of the k colors. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.

The cost of painting each house with a certain color is represented by a n x k cost matrix. For example, costs[0][0] is the cost of painting house 0 with color 0; costs[1][2] is the cost of painting house 1 with color 2, and so on... Find the minimum cost to paint all houses.

Note:
All costs are positive integers.

Follow up:
Could you solve it in O(nk) runtime?

class Solution(object):
    def minCostII(self, costs):
        """
        :type costs: List[List[int]]
        :rtype: int
        """
        if not costs or not costs[0]:
            return 0
        mincost=[[0]*len(costs[0]) for i in range(len(costs)+1)]
        premini=-1
        premin=0
        for i in range(1,len(mincost)):
            curmini=0
            secondmin=min(mincost[i-1][:premini]+mincost[i-1][premini+1:])
            for j in range(len(costs[0])):
                if j!=premini:
                    mincost[i][j]=premin+costs[i-1][j]
                else:
                    mincost[i][j]=secondmin+costs[i-1][j]
                if mincost[i][j]<mincost[i][curmini]:
                    curmini=j
            premini=curmini
            premin=mincost[i][premini]
        return min(mincost[-1])
