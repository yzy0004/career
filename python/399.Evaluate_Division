399. Evaluate Division


Equations are given in the format A / B = k, where A and B are variables represented as strings, and k is a real number (floating point number). Given some queries, return the answers. If the answer does not exist, return -1.0.

Example:
Given a / b = 2.0, b / c = 3.0. 
queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ? . 
return [6.0, 0.5, -1.0, 1.0, -1.0 ].

The input is: vector<pair<string, string>> equations, vector<double>& values, vector<pair<string, string>> queries , where equations.size() == values.size(), and the values are positive. This represents the equations. Return vector<double>.

According to the example above:

equations = [ ["a", "b"], ["b", "c"] ],
values = [2.0, 3.0],
queries = [ ["a", "c"], ["b", "a"], ["a", "e"], ["a", "a"], ["x", "x"] ]. 
The input is always valid. You may assume that evaluating the queries will result in no division by zero and there is no contradiction.



class Solution(object):
    def calcEquation(self, equations, values, queries):
        """
        :type equations: List[List[str]]
        :type values: List[float]
        :type queries: List[List[str]]
        :rtype: List[float]
        """
        a=set()
        equ=collections.defaultdict(list)
        val={}
        for i,q in enumerate(equations):
            el,er=q
            a.add(el)
            a.add(er)
            equ[el].append(er)
            equ[er].append(el)
            val[(el,er)]=values[i]
            val[(er,el)]=1/values[i]
        re=[]
        for ql,qr in queries:
            if ql not in a or qr not in a:
                re.append(-1.0)
                continue
            queue=[(ql,1)]
            visited=[]
            found=False
            while queue:
                l,v=queue.pop(0)
                if (l,qr) in val:
                    re.append(v*val[(l,qr)])
                    found=True
                    break
                else:
                    for r in [m for m in equ[l] if (l,m) not in visited]:
                        queue.append((r,val[(l,r)]*v))
                        visited.append((l,r))
            if not found:
                re.append(-1.0)
        return re
        
