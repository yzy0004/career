282. Expression Add Operators

Given a string that contains only digits 0-9 and a target value, return all possibilities to add binary operators (not unary) +, -, or * between the digits so they evaluate to the target value.

Examples: 
"123", 6 -> ["1+2+3", "1*2*3"] 
"232", 8 -> ["2*3+2", "2+3*2"]
"105", 5 -> ["1*0+5","10-5"]
"00", 0 -> ["0+0", "0-0", "0*0"]
"3456237490", 9191 -> []

class Solution(object):
    def addOperators(self, num, target):
        """
        :type num: str
        :type target: int
        :rtype: List[str]
        """
        res=[]
        def helper(path,start,val,lastval):
            if start==len(num) and val==target:
                res.append(path)
            for i in range(start,len(num)):
                if i!=start and num[start]=='0':
                    break
                v=int(num[start:i+1])
                if start==0:
                    helper(str(v),i+1,v,v)
                else:
                    helper(path+'+'+str(v),i+1,val+v,v)
                    helper(path+'-'+str(v),i+1,val-v,-v)
                    helper(path+'*'+str(v),i+1,val-lastval+lastval*v,lastval*v)
        helper('',0,0,0)
        return res
