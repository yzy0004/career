10. Regular Expression Matching

Implement regular expression matching with support for '.' and '*'.

'.' Matches any single character.
'*' Matches zero or more of the preceding element.

The matching should cover the entire input string (not partial).

The function prototype should be:
bool isMatch(const char *s, const char *p)

Some examples:
isMatch("aa","a") → false
isMatch("aa","aa") → true
isMatch("aaa","aa") → false
isMatch("aa", "a*") → true
isMatch("aa", ".*") → true
isMatch("ab", ".*") → true
isMatch("aab", "c*a*b") → true

class Solution(object):
    def isMatch(self, s, p):
        """
        :type s: str
        :type p: str
        :rtype: bool
        """
        dp=[[False]*(len(p)+1) for i in range(len(s)+1)]
        dp[0][0]=True
        for i in range(len(p)):
            if p[i]=='*':
                dp[0][i+1]=dp[0][i-1]
            
        for i in range(len(s)):
            for j in range(len(p)):
                if p[j]=='.':
                    dp[i+1][j+1]=dp[i][j]
                elif p[j]!='*' and p[j]==s[i]:
                    dp[i+1][j+1]=dp[i][j]
                elif p[j]=='*':
                    if p[j-1]!='.' and s[i]!=p[j-1]:
                        dp[i+1][j+1]=dp[i+1][j-1]
                    else:
                        dp[i+1][j+1]=dp[i+1][j-1] or dp[i+1][j] or dp[i][j+1]
        return dp[len(s)][len(p)]
