211. Add and Search Word - Data structure design

Design a data structure that supports the following two operations:

void addWord(word)
bool search(word)
search(word) can search a literal word or a regular expression string containing only letters a-z or .. A . means it can represent any one letter.

For example:

addWord("bad")
addWord("dad")
addWord("mad")
search("pad") -> false
search("bad") -> true
search(".ad") -> true
search("b..") -> true
Note:
You may assume that all words are consist of lowercase letters a-z.

First solution but slow using Trie:

class WordDictionary(object):
    class Trie():
        def __init__(self):
            self.isWord=False
            self.pointer=[None]*26
            
    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.head=self.Trie()

    def addWord(self, word):
        """
        Adds a word into the data structure.
        :type word: str
        :rtype: void
        """
        curr=self.head
        for c in word:
            if not curr.pointer[ord(c)-ord('a')]:
                curr.pointer[ord(c)-ord('a')]=self.Trie()
            curr=curr.pointer[ord(c)-ord('a')]
        curr.isWord=True

    def search(self, word):
        """
        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.
        :type word: str
        :rtype: bool
        """
        def helper(word,node):
            if not word:
                if node and node.isWord:
                    return True
                else:
                    return False
            else:
                if not node:
                    return False
                else:
                    if word[0]=='.':
                        re=False
                        for p in node.pointer:
                            re=re or helper(word[1:],p)
                        return re
                    else:
                        return helper(word[1:],node.pointer[ord(word[0])-ord('a')])
        return helper(word,self.head)

# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)



Improve the solution using the length of the word since . is just one char and the len should be fix. But this one using list. It should not perform better than Trie when scale is large:

class WordDictionary(object):
    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.d=collections.defaultdict(list)

    def addWord(self, word):
        """
        Adds a word into the data structure.
        :type word: str
        :rtype: void
        """
        self.d[len(word)].append(word)

    def search(self, word):
        """
        Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter.
        :type word: str
        :rtype: bool
        """
        if self.d[len(word)]:
            l=self.d[len(word)]
            if '.' not in word:
                return word in l
            else:
                for w in l:
                    assume=True
                    for i,c in enumerate(word):
                        if c!='.' and c!=w[i]:
                            assume=False
                            break
                    if assume:
                        return True
                return False
        else:
            return False

# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)
