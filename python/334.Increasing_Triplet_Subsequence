334. Increasing Triplet Subsequence

Given an unsorted array return whether an increasing subsequence of length 3 exists or not in the array.

Formally the function should:
Return true if there exists i, j, k 
such that arr[i] < arr[j] < arr[k] given 0 ≤ i < j < k ≤ n-1 else return false.
Your algorithm should run in O(n) time complexity and O(1) space complexity.

Examples:
Given [1, 2, 3, 4, 5],
return true.

Given [5, 4, 3, 2, 1],
return false.

class Solution(object):
    def increasingTriplet(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        l=len(nums)
        if l<3:
            return False
        left=[0]*l
        right=[0]*l
        pre=nums[0]
        for i in range(l):
            left[i]=min(pre,nums[i])
            pre=left[i]
        pre=nums[-1]
        for i in range(l-1,-1,-1):
            right[i]=max(pre,nums[i])
            pre=right[i]
        for i in range(1,l-1):
            if left[i]<nums[i] and nums[i]<right[i]:
                return True
        return False
