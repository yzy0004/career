76. Minimum Window Substring

Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).

For example,
S = "ADOBECODEBANC"
T = "ABC"
Minimum window is "BANC".

Note:
If there is no such window in S that covers all characters in T, return the empty string "".

If there are multiple such windows, you are guaranteed that there will always be only one unique minimum window in S.


First solution but bad performance:

class Solution(object):
    def minWindow(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: str
        """
        count=collections.defaultdict(int)
        tc={}
        for c in t:
            if c in tc:
                tc[c]+=1
            else:
                tc[c]=1
        sub=[]
        minlen=len(s)+1
        re=''
        rc=0
        for c in s:
            sub.append(c)
            if c in tc:
                count[c]+=1
            while True:
                if sub[0] in tc and count[sub[0]]>tc[sub[0]]:
                    a=sub.pop(0)
                    count[a]-=1
                elif sub[0] not in tc:
                    sub.pop(0)
                else:
                    break
                if not sub:
                    break
            found=True
            for ch in tc:
                if ch not in count or count[ch]<tc[ch]:
                    found=False
                    break
                    
            if found:
                if len(sub)<minlen:
                    re=''.join(sub)
                    minlen=len(sub)
                    
        return re
        

Improvement:

class Solution(object):
    def minWindow(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: str
        """
        count=collections.defaultdict(int)
        valid=0
        for c in t:
            count[c]+=1
            valid+=1
        start=0
        end=0
        minlen=len(s)+1
        minstart=0
        
        while end<len(s):
            count[s[end]]-=1
            if count[s[end]]>=0:
                valid-=1
            while valid==0:
                if (end-start+1)<minlen:
                    minlen=end-start+1
                    minstart=start
                count[s[start]]+=1
                if count[s[start]]>0:
                    valid+=1
                start+=1
            end+=1
        if minlen<=len(s):
            return s[minstart:minlen+minstart]
        else:
            return ''
