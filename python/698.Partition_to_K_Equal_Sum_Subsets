698. Partition to K Equal Sum Subsets

Given an array of integers nums and a positive integer k, find whether it's possible to divide this array into k non-empty subsets whose sums are all equal.

Example 1:
Input: nums = [4, 3, 2, 3, 5, 2, 1], k = 4
Output: True
Explanation: It's possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.
Note:

1 <= k <= len(nums) <= 16.
0 < nums[i] < 10000.



class Solution(object):
    def canPartitionKSubsets(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: bool
        """
        s = sum(nums)
        if len(nums)<1:
            return True
        if s % k != 0 or k > len(nums):
            return False
        avg = s/k
        self.nums = sorted(nums,reverse=True)
        if self.nums[0]>avg:
            return False
        self.mark = [0] * len(nums)
        find = True
        for i in range(0,k):
            find = find and self.find_partition(avg)
        return find
    
    def find_partition(self, target):
        for index,num in enumerate(self.nums):
            if num > target:
                continue
            if self.mark[index]:
                continue
            self.mark[index] = 1
            if num == target:
                return True
            if self.find_partition(target-num):
                return True
            self.mark[index] = 0
        return False
