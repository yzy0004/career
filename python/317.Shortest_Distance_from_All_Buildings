317. Shortest Distance from All Buildings


You want to build a house on an empty land which reaches all buildings in the shortest amount of distance. You can only move up, down, left and right. You are given a 2D grid of values 0, 1 or 2, where:

Each 0 marks an empty land which you can pass by freely.
Each 1 marks a building which you cannot pass through.
Each 2 marks an obstacle which you cannot pass through.
For example, given three buildings at (0,0), (0,4), (2,2), and an obstacle at (0,2):

1 - 0 - 2 - 0 - 1
|   |   |   |   |
0 - 0 - 0 - 0 - 0
|   |   |   |   |
0 - 0 - 1 - 0 - 0
The point (1,2) is an ideal empty land to build a house, as the total travel distance of 3+3+1=7 is minimal. So return 7.

Note:
There will be at least one building. If it is not possible to build such house according to the above rules, return -1.


class Solution(object):
    def shortestDistance(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        if grid is None or len(grid)==0:
            return -1
        m,n=len(grid),len(grid[0])
        houses=sum(val for line in grid for val in line if val==1)
        def bfs(startx,starty):
            visited=[[0]*n for i in range(m)]
            queue=[]
            step=0
            queue.append((startx,starty,step))
            count=0
            countstep=0
            while queue:
                x,y,step=queue.pop(0)
                step+=1
                for d in [[-1,0],[1,0],[0,-1],[0,1]]:
                    newx,newy=x+d[0],y+d[1]
                    if 0<=newx<m and 0<=newy<n and grid[newx][newy]!=2 and visited[newx][newy]==0:
                        visited[newx][newy]=1
                        if grid[newx][newy]==1:
                            count+=1
                            countstep+=step
                            if count==houses:
                                return countstep
                        else:
                            queue.append((newx,newy,step))
            return -1
        c=False
        for i in range(m):
            for j in range(n):
                if grid[i][j]==1:
                    if bfs(i,j)==-1:
                        return -1
                    else:
                        c=True
                        break
            if c:
                break
        distance=-1
        for i in range(m):
            for j in range(n):
                if grid[i][j]==0:
                    dis=bfs(i,j)
                    distance = (min(distance,dis) if dis>0 and distance>0 else max(distance,dis))
        return distance
                        
                        
