269. Alien Dictionary

There is a new alien language which uses the latin alphabet. However, the order among letters are unknown to you. You receive a list of non-empty words from the dictionary, where words are sorted lexicographically by the rules of this new language. Derive the order of letters in this language.

Example 1:
Given the following words in dictionary,

[
  "wrt",
  "wrf",
  "er",
  "ett",
  "rftt"
]
The correct order is: "wertf".

Example 2:
Given the following words in dictionary,

[
  "z",
  "x"
]
The correct order is: "zx".

Example 3:
Given the following words in dictionary,

[
  "z",
  "x",
  "z"
]
The order is invalid, so return "".

Note:
You may assume all letters are in lowercase.
You may assume that if a is a prefix of b, then a must appear before b in the given dictionary.
If the order is invalid, return an empty string.
There may be multiple valid order of letters, return any one of them is fine.


class Solution(object):
    def alienOrder(self, words):
        """
        :type words: List[str]
        :rtype: str
        """
        seq=collections.defaultdict(list)
        point={}
        for w in words:
            for c in w:
                point[c]=0
        for i in range(1,len(words)):
            a=words[i-1]
            b=words[i]
            j=0
            while j<len(a) and j<len(b):
                if a[j]!=b[j]:
                    seq[a[j]].append(b[j])
                    point[b[j]]+=1
                    break
                j+=1
        re=[]
        queue=[]
        for k,v in point.iteritems():
            if v==0:
                queue.append(k)
        while queue:
            c=queue.pop(0)
            re.append(c)
            for d in seq[c]:
                point[d]-=1
                if point[d]==0:
                    queue.append(d)
        if len(re)!=len(point):
            return ''
        else:
            return ''.join(re)
