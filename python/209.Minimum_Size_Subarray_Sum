209. Minimum Size Subarray Sum

Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum â‰¥ s. If there isn't one, return 0 instead.

For example, given the array [2,3,1,2,4,3] and s = 7,
the subarray [4,3] has the minimal length under the problem constraint.

click to show more practice.

More practice:
If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n).


class Solution(object):
    def minSubArrayLen(self, s, nums):
        """
        :type s: int
        :type nums: List[int]
        :rtype: int
        """
        if not nums:
            return 0
        h,t,ml=0,0,len(nums)+1
        total=0
        while t<len(nums):
            if total<s:
                total+=nums[t]
                t+=1
            while total>=s:
                ml=min(ml,t-h)
                total-=nums[h]
                h+=1
        return 0 if ml>len(nums) else ml
