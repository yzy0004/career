465. Optimal Account Balancing

A group of friends went on holiday and sometimes lent each other money. For example, Alice paid for Bill's lunch for $10. Then later Chris gave Alice $5 for a taxi ride. We can model each transaction as a tuple (x, y, z) which means person x gave person y $z. Assuming Alice, Bill, and Chris are person 0, 1, and 2 respectively (0, 1, 2 are the person's ID), the transactions can be represented as [[0, 1, 10], [2, 0, 5]].

Given a list of transactions between a group of people, return the minimum number of transactions required to settle the debt.

Note:

A transaction will be given as a tuple (x, y, z). Note that x â‰  y and z > 0.
Person's IDs may not be linear, e.g. we could have the persons 0, 1, 2 or we could also have the persons 0, 2, 6.
Example 1:

Input:
[[0,1,10], [2,0,5]]

Output:
2

Explanation:
Person #0 gave person #1 $10.
Person #2 gave person #0 $5.

Two transactions are needed. One way to settle the debt is person #1 pays person #0 and #2 $5 each.
Example 2:

Input:
[[0,1,10], [1,0,1], [1,2,5], [2,0,5]]

Output:
1

Explanation:
Person #0 gave person #1 $10.
Person #1 gave person #0 $1.
Person #1 gave person #2 $5.
Person #2 gave person #0 $5.

Therefore, person #1 only need to give person #0 $4, and all debt is settled.


class Solution(object):
    def minTransfers(self, transactions):
        """
        :type transactions: List[List[int]]
        :rtype: int
        """
        debt=collections.defaultdict(int)
        for t in transactions:
            debt[t[0]]+=t[2]
            debt[t[1]]-=t[2]
        rich=[i for i in debt.values() if i>0]
        poor=[i for i in debt.values() if i<0]
        solution=collections.defaultdict(dict)
        def solve(rich,poor):
            if len(rich)==0:
                return 0
            if min(len(rich),len(poor))==1:
                return max(len(rich),len(poor))
            rich.sort()
            poor.sort()
            if solution[tuple(rich)].get(tuple(poor),0):
                return solution[tuple(rich)][tuple(poor)]
            minsolution=len(rich)+len(poor)-1
            for i in range(len(rich)):
                nrich=rich[:i]+rich[i+1:]
                npoor=poor[1:]
                r=rich[i]
                p=poor[0]
                if r+p>0:
                    nrich.append(r+p)
                elif r+p<0:
                    npoor.append(r+p)
                minsolution=min(minsolution,solve(nrich,npoor)+1)
            solution[tuple(rich)][tuple(poor)]=minsolution
            return minsolution
        return solve(rich,poor)
