714. Best Time to Buy and Sell Stock with Transaction Fee

Your are given an array of integers prices, for which the i-th element is the price of a given stock on day i; and a non-negative integer fee representing a transaction fee.

You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction. You may not buy more than 1 share of a stock at a time (ie. you must sell the stock share before you buy again.)

Return the maximum profit you can make.

Example 1:
Input: prices = [1, 3, 2, 8, 4, 9], fee = 2
Output: 8
Explanation: The maximum profit can be achieved by:
Buying at prices[0] = 1
Selling at prices[3] = 8
Buying at prices[4] = 4
Selling at prices[5] = 9
The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.
Note:

0 < prices.length <= 50000.
0 < prices[i] < 50000.
0 <= fee < 50000.

class Solution(object):
    def maxProfit(self, prices, fee):
        """
        :type prices: List[int]
        :type fee: int
        :rtype: int
        """
        buy=[p+fee for p in prices]
        profit=0
        buyin=-1
        sell=0
        for i in range(len(prices)-1):
            if buyin==-1:
                if buy[i]>=buy[i+1]:
                    continue
                else:
                    buyin=i
                    sell=prices[i]
            else:
                if buy[i]<buy[buyin]:
                    buyin=i
                    sell=prices[i]
                else:
                    sell=max(sell,prices[i])
                    if sell>buy[i+1] and sell>buy[buyin]:
                        profit+=sell-buy[buyin]
                        buyin=-1
        if buyin>=0 and buyin<(len(buy)-1):
            sell=max(sell,prices[-1])
            if sell>buy[buyin]:
                profit+=sell-buy[buyin]
        return profit


Solution II:

class Solution(object):
    def maxProfit(self, prices, fee):
        """
        :type prices: List[int]
        :type fee: int
        :rtype: int
        """
        if not prices:
            return 0
        cash=0
        balance=cash-prices[0]
        for i in range(1,len(prices)):
            cash=max(cash,balance+prices[i]-fee)
            balance=max(balance,cash-prices[i])
        return cash
