53. Maximum Subarray

Find the contiguous subarray within an array (containing at least one number) which has the largest sum.

For example, given the array [-2,1,-3,4,-1,2,1,-5,4],
the contiguous subarray [4,-1,2,1] has the largest sum = 6.







class Solution(object):
    def maxSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        msf = [0] * len(nums)
        end = [0] * len(nums)
        for i,num in enumerate(nums):
            if i==0:
                msf[i]=num
                end[i]=num
            else:
                end[i]= max(end[i-1]+num, num)
                msf[i]= max(msf[i-1],end[i])
            
        return max(msf)



Improvement:

class Solution(object):
    def maxSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if nums is None or len(nums)<1:
            return 0
        msf = 0
        for i,num in enumerate(nums):
            if i==0:
                msf=num
                end=num
            else:
                end= max(end+num, num)
                msf= max(msf,end)
            
        return msf
            
        
