689. Maximum Sum of 3 Non-Overlapping Subarrays

In a given array nums of positive integers, find three non-overlapping subarrays with maximum sum.

Each subarray will be of size k, and we want to maximize the sum of all 3*k entries.

Return the result as a list of indices representing the starting position of each interval (0-indexed). If there are multiple answers, return the lexicographically smallest one.

Example:
Input: [1,2,1,2,6,7,5,1], 2
Output: [0, 3, 5]
Explanation: Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5].
We could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger.
Note:
nums.length will be between 1 and 20000.
nums[i] will be between 1 and 65535.
k will be between 1 and floor(nums.length / 3).


class Solution(object):
    def maxSumOfThreeSubarrays(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """
        maxsum=nums[0]
        re=[]
        dp=[sum(nums[:k])]
        for i in range(1,len(nums)-k+1):
            dp.append(dp[-1]-nums[i-1]+nums[i+k-1])
        left=[0]*(len(nums)-3*k+1)
        for i in range(1,len(nums)-3*k+1):
            if dp[i]>dp[left[i-1]]:
                left[i]=i
            else:
                left[i]=left[i-1]
        
        right=[len(nums)-k]*(len(nums)-k+1)
        for i in range(len(nums)-k-1,2*k-1,-1):
            if dp[i]>=dp[right[i+1]]:
                right[i]=i
            else:
                right[i]=right[i+1]
        
        for i in range(k,len(nums)-2*k+1):
            s=dp[left[i-k]]+dp[right[i+k]]+dp[i]
            if s>maxsum:
                maxsum=s
                re=[left[i-k],i,right[i+k]]
        return re
