128. Longest Consecutive Sequence

Given an unsorted array of integers, find the length of the longest consecutive elements sequence.

For example,
Given [100, 4, 200, 1, 3, 2],
The longest consecutive elements sequence is [1, 2, 3, 4]. Return its length: 4.

Your algorithm should run in O(n) complexity.


class Solution(object):
    def longestConsecutive(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        count=collections.defaultdict(int)
        maxcount=[0]
        u={}
        def findroot(num):
            while num!=u[num]:
                num=u[num]
            return num
        def unionjoint(num1,num2):
            if num1 not in u or num2 not in u:
                return
            num1=findroot(num1)
            num2=findroot(num2)
            c1=count[num1]
            c2=count[num2]
            if c1<c2:
                u[num1]=num2
                count[num2]+=c1
            else:
                u[num2]=num1
                count[num1]+=c2
            maxcount[0]=max(maxcount[0],c1+c2)
        for num in nums:
            if num in u:
                continue
            else:
                u[num]=num
                count[num]=1
                maxcount[0]=max(maxcount[0],1)
                unionjoint(num,num-1)
                unionjoint(num,num+1)
        return maxcount[0]


Improvement:
Only need to record max value for the boundaries since all the mid value will be skipped. Join operation reduced from O(logN) to O(1)

class Solution(object):
    def longestConsecutive(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        maxcount=0
        u=collections.defaultdict(int)
        for num in nums:
            if u[num] > 0:
                continue
            else:
                u[num]=1
                l=u[num-1]
                r=u[num+1]
                length=r+1+l
                maxcount=max(maxcount,length)
                u[num-l]=length
                u[num+r]=length
        return maxcount 
