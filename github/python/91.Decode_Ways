91. Decode Ways

A message containing letters from A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26
Given an encoded message containing digits, determine the total number of ways to decode it.

For example,
Given encoded message "12", it could be decoded as "AB" (1 2) or "L" (12).

The number of ways decoding "12" is 2.

class Solution(object):
    def numDecodings(self, s):
        """
        :type s: str
        :rtype: int
        """
        if not s or s[0]=='0':
            return 0
        dp=[1]*(len(s)+1)
        dp[1]=1
        for i in range(2,len(s)+1):
            num=int(s[i-2:i])
            if num==0:
                return 0
            if num%10==0:
                if num>26:
                    return 0
                dp[i]=dp[i-2]
            elif num<=26 and num>10:
                dp[i]=dp[i-1]+dp[i-2]
            else:
                dp[i]=dp[i-1]
                    
        return dp[-1]


Another shorter solution:

class Solution(object):
    def numDecodings(self, s):
        """
        :type s: str
        :rtype: int
        """
        if not s:
            return 0
        dp,dp1,dp2=1,0,0
        for c in s:
            ndp=dp*(c!='0')+dp1+dp2*(c<='6')
            ndp1=(c=='1')*dp
            ndp2=(c=='2')*dp
            dp,dp1,dp2=ndp,ndp1,ndp2
        return dp
