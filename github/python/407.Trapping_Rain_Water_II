407. Trapping Rain Water II

Given an m x n matrix of positive integers representing the height of each unit cell in a 2D elevation map, compute the volume of water it is able to trap after raining.

Note:
Both m and n are less than 110. The height of each unit cell is greater than 0 and is less than 20,000.

Example:

Given the following 3x6 height map:
[
  [1,4,3,1,3,2],
  [3,2,1,3,2,4],
  [2,3,3,2,3,1]
]

Return 4.

The above image represents the elevation map [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]] before the rain.


After the rain, water are trapped between the blocks. The total volume of water trapped is 4.



class Solution(object):
    def trapRainWater(self, heightMap):
        """
        :type heightMap: List[List[int]]
        :rtype: int
        """
        if not heightMap:
            return 0
        visited={}
        q=[]
        m=len(heightMap)
        n=len(heightMap[0])
        for i in range(n):
            visited[(0,i)]=True
            visited[(m-1,i)]=True
            heapq.heappush(q,(heightMap[0][i],0,i))
            heapq.heappush(q,(heightMap[m-1][i],m-1,i))
            
        for i in range(m):
            visited[(i,0)]=True
            visited[(i,n-1)]=True
            heapq.heappush(q,(heightMap[i][0],i,0))
            heapq.heappush(q,(heightMap[i][n-1],i,n-1))
            
        water=0
        while q:
            ch,x,y=heapq.heappop(q)
            for i,j in [(x+1,y),(x-1,y),(x,y+1),(x,y-1)]:
                if 0<=i<m and 0<=j<n and (i,j) not in visited:
                    water+=max(0,ch-heightMap[i][j])
                    heapq.heappush(q,(max(ch,heightMap[i][j]),i,j))
                    visited[(i,j)]=True
        return water
            
