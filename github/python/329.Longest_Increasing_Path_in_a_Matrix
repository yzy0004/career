329. Longest Increasing Path in a Matrix

Given an integer matrix, find the length of the longest increasing path.

From each cell, you can either move to four directions: left, right, up or down. You may NOT move diagonally or move outside of the boundary (i.e. wrap-around is not allowed).

Example 1:

nums = [
  [9,9,4],
  [6,6,8],
  [2,1,1]
]
Return 4
The longest increasing path is [1, 2, 6, 9].

Example 2:

nums = [
  [3,4,5],
  [3,2,6],
  [2,2,1]
]
Return 4
The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.


class Solution(object):
    def longestIncreasingPath(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: int
        """
        if matrix is None or len(matrix)==0:
            return 0
        m=len(matrix)
        n=len(matrix[0])
        dp=[[0 for i in range(n)] for j in range(m)] 
        longest=1
        
        def dfs(x,y):
            if dp[x][y]:
                return dp[x][y]
            longpath=0
            for i,j in [(x+1,y),(x-1,y),(x,y+1),(x,y-1)]:
                if 0<=i<m and 0<=j<n and matrix[x][y]<matrix[i][j]:
                    longpath=max(longpath,dfs(i,j))
            longpath+=1
            dp[x][y]=longpath
            return longpath
        
        for o in range(m):
            for p in range(n):
                longest=max(longest,dfs(o,p))
        return longest
