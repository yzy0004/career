572. Subtree of Another Tree

Given two non-empty binary trees s and t, check whether tree t has exactly the same structure and node values with a subtree of s. A subtree of s is a tree consists of a node in s and all of this node's descendants. The tree s could also be considered as a subtree of itself.

Example 1:
Given tree s:

     3
    / \
   4   5
  / \
 1   2
Given tree t:
   4 
  / \
 1   2
Return true, because t has the same structure and node values with a subtree of s.
Example 2:
Given tree s:

     3
    / \
   4   5
  / \
 1   2
    /
   0
Given tree t:
   4
  / \
 1   2


# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isSubtree(self, s, t):
        """
        :type s: TreeNode
        :type t: TreeNode
        :rtype: bool
        """
        def isSame(s,t):
            if s is None and t is None:
                return True
            if s is None or t is None:
                return False
            if s.val==t.val:
                return (isSame(s.left,t.left) and isSame(s.right,t.right))
        if t is None:
            return True
        if s is None:
            return False
        queue=[s]
        while queue:
            n = queue.pop(0)
            if n.val==t.val:
                if isSame(n,t):
                    return True
            if n.left:
                queue.append(n.left)
            if n.right:
                queue.append(n.right)
        return False

Improvement: use in order serializing the tree then find the substring inside the serialization

