2. Add Two Numbers




You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.





# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        carry=0
        first=l1
        last=l2
        re = ListNode(0)
        cp = re
        while True:
            if first is not None and last is not None:
                sum = first.val+last.val+carry
                number = ListNode(sum%10)
                cp.next = number
                cp=cp.next
                carry=sum/10
                first=first.next
                last=last.next
            elif first is not None:
                sum = first.val+carry
                number = ListNode(sum%10)
                cp.next = number
                cp=cp.next
                carry=sum/10
                first=first.next
            elif last is not None:
                sum = last.val+carry
                number = ListNode(sum%10)
                cp.next = number
                cp=cp.next
                carry=sum/10
                last=last.next
            else:
                if carry:
                    cp.next = ListNode(carry)
                break
        return re.next
        
