281. Zigzag Iterator

Given two 1d vectors, implement an iterator to return their elements alternately.

For example, given two 1d vectors:

v1 = [1, 2]
v2 = [3, 4, 5, 6]
By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1, 3, 2, 4, 5, 6].

Follow up: What if you are given k 1d vectors? How well can your code be extended to such cases?

Clarification for the follow up question - Update (2015-09-18):
The "Zigzag" order is not clearly defined and is ambiguous for k > 2 cases. If "Zigzag" does not look right to you, replace "Zigzag" with "Cyclic". For example, given the following input:

[1,2,3]
[4,5,6,7]
[8,9]
It should return [1,4,8,2,5,9,3,6,7].


class ZigzagIterator(object):

    def __init__(self, v1, v2):
        """
        Initialize your data structure here.
        :type v1: List[int]
        :type v2: List[int]
        """
        if len(v1)<1:
            self.vector=[v2, v1]
        else:
            self.vector=[v1, v2]
        self.index=[0,0]
        self.pointer=0
        

    def next(self):
        """
        :rtype: int
        """
        if self.hasNext():
            re=self.vector[self.pointer][self.index[self.pointer]]
            self.index[self.pointer]+=1
            self.pointer=1-self.pointer
            if not self.hasNext():
                self.pointer=1-self.pointer
            return re
        return None   
        

    def hasNext(self):
        """
        :rtype: bool
        """
        if self.index[self.pointer]<len(self.vector[self.pointer]):
            return True
        else:
            return False
        

# Your ZigzagIterator object will be instantiated and called as such:
# i, v = ZigzagIterator(v1, v2), []
# while i.hasNext(): v.append(i.next())





improvement using iterator:

class ZigzagIterator(object):

    def __init__(self, v1, v2):
        self.data = [(len(v), iter(v)) for v in (v1, v2) if v]
        print("")

    def next(self):
        len, iter = self.data.pop(0)
        if len > 1:
            self.data.append((len-1, iter))
        return next(iter)

    def hasNext(self):
        return bool(self.data)
