208. Implement Trie (Prefix Tree)

Implement a trie with insert, search, and startsWith methods.

Note:
You may assume that all inputs are consist of lowercase letters a-z.

class Trie(object):
    class TrieNode(object):
        def __init__(self):
            self.isword=False
            self.pointers=[None]*26
            
    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.root=self.TrieNode()

    def insert(self, word):
        """
        Inserts a word into the trie.
        :type word: str
        :rtype: void
        """
        cur=self.root
        for c in word:
            i=ord(c)-ord('a')
            if cur.pointers[i]==None:
                cur.pointers[i]=self.TrieNode()
            cur=cur.pointers[i]
        cur.isword=True

    def search(self, word):
        """
        Returns if the word is in the trie.
        :type word: str
        :rtype: bool
        """
        cur=self.root
        for c in word:
            i=ord(c)-ord('a')
            if cur.pointers[i]==None:
                return False
            cur=cur.pointers[i]
        if cur.isword:
            return True
        return False

    def startsWith(self, prefix):
        """
        Returns if there is any word in the trie that starts with the given prefix.
        :type prefix: str
        :rtype: bool
        """
        cur=self.root
        for c in prefix:
            i=ord(c)-ord('a')
            if cur.pointers[i]==None:
                return False
            cur=cur.pointers[i]
        return True


# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)
