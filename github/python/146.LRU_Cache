146. LRU Cache

Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and put.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
put(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

Follow up:
Could you do both operations in O(1) time complexity?

Example:

LRUCache cache = new LRUCache( 2 /* capacity */ );

cache.put(1, 1);
cache.put(2, 2);
cache.get(1);       // returns 1
cache.put(3, 3);    // evicts key 2
cache.get(2);       // returns -1 (not found)
cache.put(4, 4);    // evicts key 1
cache.get(1);       // returns -1 (not found)
cache.get(3);       // returns 3
cache.get(4);       // returns 4


class LRUCache(object):
    class Node(object):
        def __init__(self,key,value):
            self.key=key
            self.val=value
            self.next=None
            self.pre=None
    
    def __init__(self, capacity):
        """
        :type capacity: int
        """
        self.cap=capacity
        self.count=0
        self.head=LRUCache.Node(-1,-1)
        self.tail=LRUCache.Node(-1,-1)
        self.head.next=self.tail
        self.tail.pre=self.head
        self.d={}

    def get(self, key):
        """
        :type key: int
        :rtype: int
        """
        if key in self.d:
            cur=self.d[key]
            p=cur.pre
            n=cur.next
            p.next=n
            n.pre=p
            n=self.head.next
            n.pre=cur
            cur.pre=self.head
            self.head.next=cur
            cur.next=n
            return cur.val
        else:
            return -1

    def put(self, key, value):
        """
        :type key: int
        :type value: int
        :rtype: void
        """
        if key in self.d:
            cur=self.d[key]
            cur.val=value
            self.get(key)
        else:
            if self.count==self.cap:
                if self.count>0:
                    p=self.tail.pre.pre
                    removekey=self.tail.pre.key
                    self.d.pop(removekey)
                    p.next=self.tail
                    self.tail.pre=p
                    self.count-=1
                    
                else:
                    return
            cur=LRUCache.Node(key,value)
            self.d[key]=cur
            n=self.head.next
            n.pre=cur
            cur.pre=self.head
            self.head.next=cur
            cur.next=n
            self.count+=1
        


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
