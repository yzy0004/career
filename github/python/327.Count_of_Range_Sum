327. Count of Range Sum

Given an integer array nums, return the number of range sums that lie in [lower, upper] inclusive.
Range sum S(i, j) is defined as the sum of the elements in nums between indices i and j (i â‰¤ j), inclusive.

Note:
A naive algorithm of O(n2) is trivial. You MUST do better than that.

Example:
Given nums = [-2, 5, -1], lower = -2, upper = 2,
Return 3.
The three ranges are : [0, 0], [2, 2], [0, 2] and their respective sums are: -2, -1, 2.

class Solution(object):
    def countRangeSum(self, nums, lower, upper):
        """
        :type nums: List[int]
        :type lower: int
        :type upper: int
        :rtype: int
        """
        psum=[0]
        for n in nums:
            psum.append(psum[-1]+n)
        def countSum(start,end):
            mid=(start+end)/2
            if mid==start:
                return 0
            count = countSum(start,mid) + countSum(mid,end)
            i=j=mid # Since the left is increasing, so the corresponding right part should be increasing too so right-left still fall in range
            for left in psum[start:mid]:
                while i<end and psum[i]-left < lower:
                    i+=1
                while j<end and psum[j]-left <= upper:
                    j+=1
                count+=j-i
            psum[start:end]=sorted(psum[start:end])
            return count
        return countSum(0,len(psum))
