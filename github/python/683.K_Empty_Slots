683. K Empty Slots





There is a garden with N slots. In each slot, there is a flower. The N flowers will bloom one by one in N days. In each day, there will be exactly one flower blooming and it will be in the status of blooming since then.

Given an array flowers consists of number from 1 to N. Each number in the array represents the place where the flower will open in that day.

For example, flowers[i] = x means that the unique flower that blooms at day i will be at position x, where i and x will be in the range from 1 to N.

Also given an integer k, you need to output in which day there exists two flowers in the status of blooming, and also the number of flowers between them is k and these flowers are not blooming.

If there isn't such day, output -1.

Example 1:
Input: 
flowers: [1,3,2]
k: 1
Output: 2
Explanation: In the second day, the first and the third flower have become blooming.
Example 2:
Input: 
flowers: [1,2,3]
k: 1
Output: -1
Note:
The given array will be in the range [1, 20000].









class Solution(object):
    def kEmptySlots(self, flowers, k):
        """
        :type flowers: List[int]
        :type k: int
        :rtype: int
        """
        blooming = [0]*len(flowers)
        for i,v in enumerate(flowers):
            blooming[v-1]=i
        re = -1
        f=0
        l = len(blooming)-k-1
        while f < l:
            d = blooming[f]
            ad = blooming[f+k+1]
            day = max(d,ad)
            found=True
            i=f+1
            d=0
            while i<f+k+1: 
                if blooming[i]<day:
                    found=False
                    f=i
                    break
                i+=1
            if found:
                if re==-1:
                    re = day+1
                re = min(re, day+1)
                f+=1
        return re
                
