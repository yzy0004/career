188. Best Time to Buy and Sell Stock IV

Say you have an array for which the ith element is the price of a given stock on day i.

Design an algorithm to find the maximum profit. You may complete at most k transactions.

Note:
You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).

Credits:
Special thanks to @Freezen for adding this problem and creating all test cases.

class Solution(object):
    def maxProfit(self, k, prices):
        """
        :type k: int
        :type prices: List[int]
        :rtype: int
        """
        if not prices or not k:
            return 0
        re=0
        if k<=(len(prices)/2):
            cash=[0]*k
            hold=[-sys.maxint-1]*k
            hold[0]=-prices[0]
        
            for i in range(1,len(prices)):
                for j in range(k-1,0,-1):
                    cash[j]=max(cash[j],hold[j]+prices[i])
                    hold[j]=max(hold[j],cash[j-1]-prices[i])
                cash[0]=max(cash[0],hold[0]+prices[i])
                hold[0]=max(hold[0],-prices[i])
            re=max(cash)
        else:
            cash=0
            hold=-prices[0]
            for i in range(1,len(prices)):
                cash=max(cash,hold+prices[i])
                hold=max(hold,cash-prices[i])
            re=cash
        return re
