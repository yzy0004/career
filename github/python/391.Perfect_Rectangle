391. Perfect Rectangle

Given N axis-aligned rectangles where N > 0, determine if they all together form an exact cover of a rectangular region.

Each rectangle is represented as a bottom-left point and a top-right point. For example, a unit square is represented as [1,1,2,2]. (coordinate of bottom-left point is (1, 1) and top-right point is (2, 2)).


Example 1:

rectangles = [
  [1,1,3,3],
  [3,1,4,2],
  [3,2,4,4],
  [1,3,2,4],
  [2,3,3,4]
]

Return true. All 5 rectangles together form an exact cover of a rectangular region.

Example 2:

rectangles = [
  [1,1,2,3],
  [1,3,2,4],
  [3,1,4,2],
  [3,2,4,4]
]

Return false. Because there is a gap between the two rectangular regions.

Example 3:

rectangles = [
  [1,1,3,3],
  [3,1,4,2],
  [1,3,2,4],
  [3,2,4,4]
]

Return false. Because there is a gap in the top center.

Example 4:

rectangles = [
  [1,1,3,3],
  [3,1,4,2],
  [1,3,2,4],
  [2,2,4,4]
]

Return false. Because two of the rectangles overlap with each other.




class Solution(object):
    def isRectangleCover(self, rectangles):
        """
        :type rectangles: List[List[int]]
        :rtype: bool
        """
        if not rectangles:
            return False
        bl=[rectangles[0][0],rectangles[0][1]]
        ur=[rectangles[0][2],rectangles[0][3]]
        area=0
        mark=collections.defaultdict(int)
        for rec in rectangles:
            mark[(rec[0],rec[1])]+=1
            mark[(rec[2],rec[3])]+=1
            mark[(rec[0],rec[3])]+=1
            mark[(rec[2],rec[1])]+=1
            bl[0]=min(rec[0],bl[0])
            bl[1]=min(rec[1],bl[1])
            ur[0]=max(rec[2],ur[0])
            ur[1]=max(rec[3],ur[1])
            area+=(rec[2]-rec[0])*(rec[3]-rec[1])
        if area!=((ur[0]-bl[0])*(ur[1]-bl[1])):
            return False
        
        corners=[(bl[0],bl[1]),(bl[0],ur[1]),(ur[0],ur[1]),(ur[0],bl[1])]
        for k,v in mark.iteritems():
            if (k not in corners and v%2==1) or (k in corners and v%2==0):
                return False
        return True
            
