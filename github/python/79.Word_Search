79. Word Search

Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

For example,
Given board =

[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]
word = "ABCCED", -> returns true,
word = "SEE", -> returns true,
word = "ABCB", -> returns false.

class Solution(object):
    def exist(self, board, word):
        """
        :type board: List[List[str]]
        :type word: str
        :rtype: bool
        """
        if not board or not board[0] or not word:
            return False
        mark = [[0]*len(board[0]) for _ in range(len(board))]
        
        def findw(i,j,s):
            if len(s)==0:
                return True
            if not 0<=i<len(board) or not 0<=j<len(board[0]):
                return False
            if mark[i][j]:
                return False
            if board[i][j]==s[0]:
                mark[i][j]=1
                found=False
                for d in [(0,1),(0,-1),(1,0),(-1,0)]:
                    found=found or findw(i+d[0],j+d[1],s[1:])
                if found:
                    return True
                mark[i][j]=0
            return False
        
        for i in range(len(board)):
            for j in range(len(board[0])):
                if findw(i,j,word):
                    return True
        return False
