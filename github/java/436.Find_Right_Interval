436. Find Right Interval Add to List
Difficulty: Medium

Given a set of intervals, for each of the interval i, check if there exists an interval j whose start point is bigger than or equal to the end point of the interval i, which can be called that j is on the "right" of i.

For any interval i, you need to store the minimum interval j's index, which means that the interval j has the minimum start point to build the "right" relationship for interval i. If the interval j doesn't exist, store -1 for the interval i. Finally, you need output the stored value of each interval as an array.

Note:
You may assume the interval's end point is always bigger than its start point.
You may assume none of these intervals have the same start point.

Example 1:
Input: [ [1,2] ]

Output: [-1]

Explanation: There is only one interval in the collection, so it outputs -1.

Example 2:
Input: [ [3,4], [2,3], [1,2] ]

Output: [-1, 0, 1]

Explanation: There is no satisfied "right" interval for [3,4].
For [2,3], the interval [3,4] has minimum-"right" start point;
For [1,2], the interval [2,3] has minimum-"right" start point.

Example 3:
Input: [ [1,4], [2,3], [3,4] ]

Output: [-1, 2, -1]

Explanation: There is no satisfied "right" interval for [1,4] and [3,4].
For [2,3], the interval [3,4] has minimum-"right" start point.


/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public int[] findRightInterval(Interval[] intervals) {
        List<Integer> starts = new LinkedList();
        HashMap<Integer, Integer> index = new HashMap();
        int max = intervals[0].start;
        int min = max;
        int[] re = new int[intervals.length];
        for(int i=0;i<intervals.length;i++){
            int temp = intervals[i].start;
            if(temp>max)
                max=temp;
            if(temp<min)
                min=temp;
            starts.add(temp);
            index.put(temp,i);
        }
        
        Collections.sort(starts);
        
        for(int i=starts.size()-1;i>=0;i--){
            int start = starts.get(i);
            int in = index.get(start);
            int end = intervals[in].end;
            if(end>max)
                re[in]=-1;
            else{
                int l=i+1;
                int r=starts.size()-1;
                while(l<r){
                    int mid = l+(r-l)/2;
                    if(starts.get(mid)==end)
                        re[in]=index.get(starts.get(mid));
                    else if(starts.get(mid)<end)
                        l=mid+1;
                    else
                        r=mid;
                }
                if(l==r)
                    re[in]=index.get(starts.get(r));
            }      
        }
        return re;
    }
}
